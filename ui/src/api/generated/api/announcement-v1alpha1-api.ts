/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.21.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Announcement } from '../models';
// @ts-ignore
import type { AnnouncementList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * AnnouncementV1alpha1Api - axios parameter creator
 * @export
 */
export const AnnouncementV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Announcement
         * @param {Announcement} [announcement] Fresh announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement: async (announcement?: Announcement, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(announcement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Announcement
         * @param {string} name Name of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnouncement: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteAnnouncement', 'name', name)
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Announcement
         * @param {string} name Name of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getAnnouncement', 'name', name)
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Announcement
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncement: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch Announcement
         * @param {string} name Name of announcement
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAnnouncement: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchAnnouncement', 'name', name)
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Announcement
         * @param {string} name Name of announcement
         * @param {Announcement} [announcement] Updated announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement: async (name: string, announcement?: Announcement, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateAnnouncement', 'name', name)
            const localVarPath = `/apis/announcement.lik.cc/v1alpha1/announcement/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(announcement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnouncementV1alpha1Api - functional programming interface
 * @export
 */
export const AnnouncementV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnouncementV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Announcement
         * @param {Announcement} [announcement] Fresh announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnouncement(announcement?: Announcement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnouncement(announcement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.createAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Announcement
         * @param {string} name Name of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnnouncement(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnouncement(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.deleteAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Announcement
         * @param {string} name Name of announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnouncement(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnouncement(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.getAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Announcement
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnnouncement(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnouncementList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAnnouncement(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.listAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch Announcement
         * @param {string} name Name of announcement
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAnnouncement(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAnnouncement(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.patchAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Announcement
         * @param {string} name Name of announcement
         * @param {Announcement} [announcement] Updated announcement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnnouncement(name: string, announcement?: Announcement, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Announcement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnnouncement(name, announcement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnouncementV1alpha1Api.updateAnnouncement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnnouncementV1alpha1Api - factory interface
 * @export
 */
export const AnnouncementV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnouncementV1alpha1ApiFp(configuration)
    return {
        /**
         * Create Announcement
         * @param {AnnouncementV1alpha1ApiCreateAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement(requestParameters: AnnouncementV1alpha1ApiCreateAnnouncementRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Announcement> {
            return localVarFp.createAnnouncement(requestParameters.announcement, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Announcement
         * @param {AnnouncementV1alpha1ApiDeleteAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnouncement(requestParameters: AnnouncementV1alpha1ApiDeleteAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAnnouncement(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Announcement
         * @param {AnnouncementV1alpha1ApiGetAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnouncement(requestParameters: AnnouncementV1alpha1ApiGetAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Announcement> {
            return localVarFp.getAnnouncement(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List Announcement
         * @param {AnnouncementV1alpha1ApiListAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnouncement(requestParameters: AnnouncementV1alpha1ApiListAnnouncementRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AnnouncementList> {
            return localVarFp.listAnnouncement(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch Announcement
         * @param {AnnouncementV1alpha1ApiPatchAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAnnouncement(requestParameters: AnnouncementV1alpha1ApiPatchAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Announcement> {
            return localVarFp.patchAnnouncement(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Announcement
         * @param {AnnouncementV1alpha1ApiUpdateAnnouncementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnnouncement(requestParameters: AnnouncementV1alpha1ApiUpdateAnnouncementRequest, options?: RawAxiosRequestConfig): AxiosPromise<Announcement> {
            return localVarFp.updateAnnouncement(requestParameters.name, requestParameters.announcement, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiCreateAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiCreateAnnouncementRequest {
    /**
     * Fresh announcement
     * @type {Announcement}
     * @memberof AnnouncementV1alpha1ApiCreateAnnouncement
     */
    readonly announcement?: Announcement
}

/**
 * Request parameters for deleteAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiDeleteAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiDeleteAnnouncementRequest {
    /**
     * Name of announcement
     * @type {string}
     * @memberof AnnouncementV1alpha1ApiDeleteAnnouncement
     */
    readonly name: string
}

/**
 * Request parameters for getAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiGetAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiGetAnnouncementRequest {
    /**
     * Name of announcement
     * @type {string}
     * @memberof AnnouncementV1alpha1ApiGetAnnouncement
     */
    readonly name: string
}

/**
 * Request parameters for listAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiListAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiListAnnouncementRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof AnnouncementV1alpha1ApiListAnnouncement
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof AnnouncementV1alpha1ApiListAnnouncement
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof AnnouncementV1alpha1ApiListAnnouncement
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof AnnouncementV1alpha1ApiListAnnouncement
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AnnouncementV1alpha1ApiListAnnouncement
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiPatchAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiPatchAnnouncementRequest {
    /**
     * Name of announcement
     * @type {string}
     * @memberof AnnouncementV1alpha1ApiPatchAnnouncement
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof AnnouncementV1alpha1ApiPatchAnnouncement
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateAnnouncement operation in AnnouncementV1alpha1Api.
 * @export
 * @interface AnnouncementV1alpha1ApiUpdateAnnouncementRequest
 */
export interface AnnouncementV1alpha1ApiUpdateAnnouncementRequest {
    /**
     * Name of announcement
     * @type {string}
     * @memberof AnnouncementV1alpha1ApiUpdateAnnouncement
     */
    readonly name: string

    /**
     * Updated announcement
     * @type {Announcement}
     * @memberof AnnouncementV1alpha1ApiUpdateAnnouncement
     */
    readonly announcement?: Announcement
}

/**
 * AnnouncementV1alpha1Api - object-oriented interface
 * @export
 * @class AnnouncementV1alpha1Api
 * @extends {BaseAPI}
 */
export class AnnouncementV1alpha1Api extends BaseAPI {
    /**
     * Create Announcement
     * @param {AnnouncementV1alpha1ApiCreateAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public createAnnouncement(requestParameters: AnnouncementV1alpha1ApiCreateAnnouncementRequest = {}, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).createAnnouncement(requestParameters.announcement, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Announcement
     * @param {AnnouncementV1alpha1ApiDeleteAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public deleteAnnouncement(requestParameters: AnnouncementV1alpha1ApiDeleteAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).deleteAnnouncement(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Announcement
     * @param {AnnouncementV1alpha1ApiGetAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public getAnnouncement(requestParameters: AnnouncementV1alpha1ApiGetAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).getAnnouncement(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Announcement
     * @param {AnnouncementV1alpha1ApiListAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public listAnnouncement(requestParameters: AnnouncementV1alpha1ApiListAnnouncementRequest = {}, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).listAnnouncement(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch Announcement
     * @param {AnnouncementV1alpha1ApiPatchAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public patchAnnouncement(requestParameters: AnnouncementV1alpha1ApiPatchAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).patchAnnouncement(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Announcement
     * @param {AnnouncementV1alpha1ApiUpdateAnnouncementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnouncementV1alpha1Api
     */
    public updateAnnouncement(requestParameters: AnnouncementV1alpha1ApiUpdateAnnouncementRequest, options?: RawAxiosRequestConfig) {
        return AnnouncementV1alpha1ApiFp(this.configuration).updateAnnouncement(requestParameters.name, requestParameters.announcement, options).then((request) => request(this.axios, this.basePath));
    }
}

